useful bash commands
-----

replace filenames: https://stackoverflow.com/questions/7450818/rename-all-files-in-directory-from-filename-h-to-filename-half

for file in *.service.ts; do mv "$file" "${file/service.ts/handler.ts}"; done


replace within file

for file in *.service.ts;
do
  sed -i 's,Service,RequestHandler,g' "$file"
done

for file in *.service.ts; do sed -i 's,Service,RequestHandler,g' "$file"; done






export async function method() {
  
}




import { Request, Response } from 'express';


(opts: {
  prop: type
  }): ServiceMethodAsyncResults {
    let {  } = opts;


(opts: {
    prop: type,
  }): ServiceMethodAsyncResults {
    let {  } = opts;


opts: {
    
  }
let {  } = opts;

let {  } = opts;

const opts = {  };



const serviceMethodResults: ServiceMethodResults = {
  status: HttpStatusCode.BAD_REQUEST,
  error: true,
  info: {
  }
};
return serviceMethodResults;

const serviceMethodResults: ServiceMethodResults = {
  status: HttpStatusCode.OK,
  error: false,
  info: {
  }
};
return serviceMethodResults;

const serviceMethodResults: ServiceMethodResults = {
          status: HttpStatusCode.OK,
          error: false,
          info: {
            data: {
            }
          }
        };
        return serviceMethodResults;

const serviceMethodResults: ServiceMethodResults = await Service.method();
    return response.status(serviceMethodResults.status).json(serviceMethodResults.info);



const dataValidation = validateData({
      data, 
      validators: create_marker_required_props,
      mutateObj: createObj
    });
    if (dataValidation.error) {
      return dataValidation;
    }

    const imageValidation = await validateAndUploadImageFile(imagefile, {
      treatNotFoundAsError: false,
      mutateObj: createObj,
      id_prop: 'icon_id',
      link_prop: 'icon_link',
    });
    if (imageValidation.error) {
      return imageValidation;
    }





export async function get_user_by_email_or_username(
  query: string
) {
  try {
    const user_model = await Users.findOne({
      where: { 
        [Op.or]: [
          { email: query },
          { username: query }
        ]
      },
    });
    return user_model;
  } catch (e) {
    console.log({
      errorMessage: `get_user_by_email_or_username error - `,
      e,
      query
    });
    throw e;
  }
}

if (phone) {
        const phoneIsDifferent = you.phone !== phone;
        if (phoneIsDifferent) {
          const phoneNumberIsOutOfRange = !(/^[0-9]{10,12}$/).test(phone);
          if (phoneNumberIsOutOfRange) {
            return response.status(HttpStatusCode.BAD_REQUEST).json({
              error: true,
              message: `Phone number is out of range; must be between 10-12 digits`
            });
          }
          const check_phone = await UserRepo.get_user_by_phone(phone);
          if (check_phone) {
            return response.status(HttpStatusCode.BAD_REQUEST).json({
              error: true,
              message: `Phone number is already in use...`
            });
          } else {
            updatesObj.phone = phone;
            updatesObj.phone_verified = false;
            phone_changed = true;
          }
        }
      }




// new app

import { Router } from 'express';

import { UsersRouter } from './routers/users.router';
import { _modelsRouter } from './routers/_models.router';

export const _appRouter: Router = Router();

/** Mount Routers */

_app.use('/users', UsersRouter);







// new model.ts 

import * as Sequelize from 'sequelize';

import {
  common_options,
  sequelizeInst as sequelize
} from '../../_common/models/_def.model';

import {
  MyModelStatic,
  MyModelStaticGeneric,
  IMyModel,
} from '../../_common/models/common.model-types';

import { Users } from '../../_common/models/user.model';
import { Audios } from '../../_common/models/audio.model';
import { Photos } from '../../_common/models/photo.model';
import { Videos } from '../../_common/models/video.model';

export const null = <MyModelStatic> sequelize.define('app_nnull', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },


  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, unique: true, defaultValue: Sequelize.UUIDV1 }
}, common_options);







// new router
import { Router } from 'express';
import { YouAuthorized, YouAuthorizedSlim } from '../../_common/guards/user.guard';


export const _Router: Router = Router({ mergeParams: true });







// new guard

import { NextFunction, Request, Response } from 'express';
import { get_modell_by_id } from '../repos/modells.repo';
import { HttpStatusCode } from '../../_common/enums/http-codes.enum';
import { IMyModel } from '../../_common/models/common.model-types';


export async function ModellExists(
  request: Request,
  response: Response,
  next: NextFunction
) {
  const modell_id = parseInt(request.params.modell_id, 10);
  const modell_model = await get_modell_by_id(modell_id);
  if (!modell_model) {
    return response.status(HttpStatusCode.NOT_FOUND).json({
      message: `Modell not found`
    });
  }
  response.locals.modell_model = modell_model;
  return next();
}

export async function IsModellOwner(
  request: Request,
  response: Response,
  next: NextFunction
) {
  const modell_model = <IMyModel> response.locals.modell_model;
  const isOwner: boolean = response.locals.you.id === modell_model.get('owner_id');
  if (!isOwner) {
    return response.status(HttpStatusCode.FORBIDDEN).json({
      message: `Not modell owner`
    });
  }
  return next();
}

export async function IsNotModellOwner(
  request: Request,
  response: Response,
  next: NextFunction
) {
  const modell_model = <IMyModel> response.locals.modell_model;
  const isOwner: boolean = response.locals.you.id === modell_model.get('owner_id');
  if (isOwner) {
    return response.status(HttpStatusCode.FORBIDDEN).json({
      message: `Is modell owner`
    });
  }
  return next();
}





// new repo 

import {
  fn,
  Op,
  WhereOptions,
  FindOptions,
  Includeable,
  Model,
  FindAttributeOptions,
  GroupOption,
  Order
} from 'sequelize';
import { user_attrs_slim } from '../common.chamber';
import { PlainObject } from '../interfaces/common.interface';
import { Users } from '../models/user.model';



import { user_attrs_slim } from '../../_common/common.chamber';
import { IStoreImage } from '../../../cloudinary-manager';
import { PlainObject } from '../../_common/interfaces/common.interface';
import { Photos } from '../../_common/models/photo.model';
import { Videos } from '../../_common/models/video.model';
import { Audios } from '../../_common/models/audio.model';
import { Users } from '../../_common/models/user.model';



export async function get_modell_by_id(id: number, slim: boolean = false) {
  const modell = slim 
  ? await Modells.findByPk(id)
  : await Modells.findOne({
      where: { id },
      include: []
    });
  return modell;
}

export async function create_modell(createObj: {

}) {
  const new_modell_model = await Modells.create(<any> {
    
  });



  const modell = await get_modell_by_id(new_modell_model.get('id'));
  return modell!;
}

export async function update_modell(id: number, updateObj: {
  
}) {
  const updates = await Modells.update(<any> {
    
  }, { where: { id } });
  return updates;
}

export async function delete_modell(id: number) {
  const deletes = await Modells.destroy({ where: { id } });
  return deletes;
}








// new service

import { Request, Response } from 'express';
import {
  HttpStatusCode
} from '../../_common/enums/http-codes.enum';
import { 
  populate_common_notification_obj,
  user_attrs_slim
} from '../../_common/common.chamber';
import {
  PlainObject,
  IUser,
  IRequest
} from '../../_common/interfaces/common.interface';

import * as UserRepo from '../../_common/repos/users.repo';
import * as FollowsRepo from '../../_common/repos/follows.repo';
import * as CommonRepo from '../../_common/repos/_common.repo';
import { create_notification } from '../../_common/repos/notifications.repo';
import { Follows, Users } from '../../_common/models/user.model';
import { COMMON_EVENT_TYPES } from '../../_common/enums/common.enum';
import { SocketsService } from '../../_common/services/sockets.service';

export class NullService {
  
  static async method(request: Request, response: Response): ExpressResponse {

  }

}