import * as Sequelize from 'sequelize';
import {
  IUserModel,
  MyModelStaticGeneric,
  IResetPasswordRequestModel,
  INotificationModel,
  IContentSubscriptionModel,
  ITokenModel,
  IMyModel,
  IPhotoModel,
  IPostCommentModel,
  IPostCommentReactionModel,
  IPostCommentReplyModel,
  IPostCommentReplyReactionModel,
  IPostModel,
  IPostReactionModel,
  IPostViewerModel,
  IVideoModel,
  ICliqueModel,
  IResourceModel,
  IAudioModel,
} from './model-types';

let sequelize: Sequelize.Sequelize;
let db_env: string;

if (process.env.DATABASE_URL) {
  db_env = 'Production';
  sequelize = new Sequelize.Sequelize(process.env.DATABASE_URL, {
    dialect: 'postgres',
    dialectOptions: {
      ssl: true
    }
  });
} else {
  db_env = 'Development';
  // sequelize = new Sequelize.Sequelize('database', 'username', 'password', {
  //   dialect: 'sqlite',
  //   storage: 'database.sqlite',
  // });
  sequelize = new Sequelize.Sequelize(<string> process.env.DATABASE_URL_DEV, {
    dialect: 'postgres',
    dialectOptions: {
      ssl: false
    },
    logging: false
  });
}

export const sequelizeInst = sequelize;

const common_options = {
  paranoid: true,
  timestamps: true,
  freezeTableName: true,
  underscored: true,
  createdAt: 'created_at',
  updatedAt: 'updated_at',
  deletedAt: 'deleted_at',
}



/** User */



export const Users = <MyModelStaticGeneric<IUserModel>> sequelize.define('users', {
  id:                                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  gender:                              { type: Sequelize.INTEGER, allowNull: true }, // Unknown/Other or 0, Male or 1, Female or 2
  firstname:                           { type: Sequelize.STRING, allowNull: false },
  lastname:                            { type: Sequelize.STRING, allowNull: false },
  username:                            { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  email:                               { type: Sequelize.STRING, allowNull: false },
  paypal:                              { type: Sequelize.STRING, allowNull: true },
  phone:                               { type: Sequelize.STRING, allowNull: true },
  password:                            { type: Sequelize.STRING, allowNull: false },
  headline:                            { type: Sequelize.STRING(75), allowNull: false, defaultValue: '' },
  bio:                                 { type: Sequelize.TEXT, allowNull: false, defaultValue: '' },
  tags:                                { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  icon_link:                           { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  icon_id:                             { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  photo_id_link:                       { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  photo_id_id:                         { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  wallpaper_link:                      { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  wallpaper_id:                        { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  location:                            { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  location_id:                         { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  location_json:                       { type: Sequelize.JSON, allowNull: true, defaultValue: '' },
  zipcode:                             { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  city:                                { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  state:                               { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  county:                              { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  country:                             { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  lat:                                 { type: Sequelize.FLOAT, allowNull: true, defaultValue: 0 },
  lng:                                 { type: Sequelize.FLOAT, allowNull: true, defaultValue: 0 },
  public:                              { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: true },
  online:                              { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  premium:                             { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  cerified:                            { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  email_verified:                      { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  phone_verified:                      { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  can_message:                         { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: true },
  can_converse:                        { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: true },
  notifications_last_opened:           { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  date_created:                        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                                { type: Sequelize.STRING, unique: true, defaultValue: Sequelize.UUIDV1 }
}, {
  ...common_options,
  indexes: [{ unique: true, fields: ['email', 'paypal', 'uuid']} ] 
});

export const UserPremiumSubscriptions = <MyModelStaticGeneric<IMyModel>> sequelize.define('user_premium_suscriptions', {
  id:                   { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:              { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  billing_id:           { type: Sequelize.STRING, allowNull: false },
  product_id:           { type: Sequelize.STRING, allowNull: false },
  plan_id:              { type: Sequelize.STRING, allowNull: false },
  date_created:         { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  active:               { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  uuid:                 { type: Sequelize.STRING, unique: true, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const UserTypes = <MyModelStaticGeneric<IMyModel>> sequelize.define('user_types', {
  id:                   { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:              { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  type:                 { type: Sequelize.STRING, allowNull: false },
  uuid:                 { type: Sequelize.STRING, unique: true, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const UserFields = <MyModelStaticGeneric<IMyModel>> sequelize.define('user_fields', {
  id:                   { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:              { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  fieldname:            { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  fieldtype:            { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  fieldvalue:           { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  uuid:                 { type: Sequelize.STRING, unique: true, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const UsersEmailVerifications = <MyModelStaticGeneric<IMyModel>> sequelize.define('users_email_verifications', {
  id:                      { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:                 { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  email:                   { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  verification_code:       { type: Sequelize.STRING, unique: true, defaultValue: Sequelize.UUIDV1 },
  verified:                { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
}, common_options);

export const UsersPhoneVerifications = <MyModelStaticGeneric<IMyModel>> sequelize.define('users_phone_verifications', {
  id:                      { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:                 { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  request_id:              { type: Sequelize.STRING, unique: true, allowNull: true },
  phone:                   { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  verification_code:       { type: Sequelize.STRING, allowNull: false },
}, common_options);

export const UserPageViews = <MyModelStaticGeneric<IMyModel>> sequelize.define('page_views', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  seen_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 },
}, common_options);

export const UserRatings = <MyModelStaticGeneric<IMyModel>> sequelize.define('user_ratings', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  writer_id:           { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  rating:              { type: Sequelize.INTEGER, allowNull: false, defaultValue: 5 },
  title:               { type: Sequelize.TEXT, allowNull: true, defaultValue: '' },
  summary:             { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 },
}, common_options);

export const ResetPasswordRequests = <MyModelStaticGeneric<IResetPasswordRequestModel>> sequelize.define('reset_password_requests', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  completed:           { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  uuid:                { type: Sequelize.STRING, unique: true, defaultValue: Sequelize.UUIDV1 },
  unique_value:        { type: Sequelize.STRING, unique: true, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const Notifications = <MyModelStaticGeneric<INotificationModel>> sequelize.define('notifications', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  from_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  to_id:               { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  event:               { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  target_type:         { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  target_id:           { type: Sequelize.INTEGER, allowNull: true, defaultValue: 0 },
  read:                { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  image_link:          { type: Sequelize.TEXT, allowNull: true, defaultValue: '' },
  image_id:            { type: Sequelize.TEXT, allowNull: true, defaultValue: '' },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const ContentSubscriptions = <MyModelStaticGeneric<IContentSubscriptionModel>> sequelize.define('content_subscriptions', {
  id:                         { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:                    { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  target_type:                { type: Sequelize.STRING, allowNull: false },
  target_id:                  { type: Sequelize.INTEGER,allowNull: false },
  target_action:              { type: Sequelize.STRING,allowNull: false },
  target_action_info:         { type: Sequelize.STRING,allowNull: false },
  frequency:                  { type: Sequelize.STRING, allowNull: false },
  date_created:               { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                       { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const Tokens = <MyModelStaticGeneric<ITokenModel>> sequelize.define('tokens', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  device:              { type: Sequelize.STRING, allowNull: false },
  token:               { type: Sequelize.TEXT, allowNull: false, unique: true },
  ip_address:          { type: Sequelize.STRING, allowNull: false },
  user_agent:          { type: Sequelize.STRING, allowNull: false },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  date_last_used:      { type: Sequelize.DATE, allowNull: false, defaultValue: Sequelize.NOW },
}, common_options);

export const Follows = <MyModelStaticGeneric<IMyModel>> sequelize.define('follows', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  follows_id:          { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 },
}, common_options);

export const FollowRequests = <MyModelStaticGeneric<IMyModel>> sequelize.define('follow_requests', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  follows_id:          { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 },
}, common_options);



/** Other */



export const PremiumProducts = <MyModelStaticGeneric<IMyModel>> sequelize.define('premium_products', {
  id:                   { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  paypal_product_id:    { type: Sequelize.STRING, allowNull: false },
  paypal_product_json:  { type: Sequelize.JSON, allowNull: false }
}, common_options);

export const PremiumProductPlans = <MyModelStaticGeneric<IMyModel>> sequelize.define('premium_product_plans', {
  id:                   { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  product_id:           { type: Sequelize.INTEGER, allowNull: false, references: { model: PremiumProducts, key: 'id' } },
  paypal_plan_id:       { type: Sequelize.STRING, allowNull: false },
  paypal_plan_json:     { type: Sequelize.JSON, allowNull: false }
}, common_options);

export const Tags = <MyModelStaticGeneric<IMyModel>> sequelize.define('tags', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  name:                { type: Sequelize.STRING, allowNull: false, unique: true },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, {
  ...common_options,
  indexes: [{ unique: true, fields: ['name']} ] 
});

export const Reactions = <MyModelStaticGeneric<IMyModel>> sequelize.define('reactions', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  name:                { type: Sequelize.STRING, allowNull: false, unique: true },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, {
  ...common_options,
  indexes: [{ unique: true, fields: ['name']} ] 
});



/** Cliques */



export const Cliques = <MyModelStaticGeneric<ICliqueModel>> sequelize.define('cliques', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  creator_id:          { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  title:               { type: Sequelize.TEXT, allowNull: false, defaultValue: '' },
  summary:             { type: Sequelize.TEXT, allowNull: false, defaultValue: '' },
  tags:                { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  icon_link:           { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  icon_id:             { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  visibility:          { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const CliqueInterests = <MyModelStaticGeneric<IMyModel>> sequelize.define('clique_interests', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  clique_id:           { type: Sequelize.INTEGER, allowNull: false, references: { model: Cliques, key: 'id' } },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 },
}, common_options);

export const CliqueMembers = <MyModelStaticGeneric<IMyModel>> sequelize.define('clique_members', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  clique_id:           { type: Sequelize.INTEGER, allowNull: false, references: { model: Cliques, key: 'id' } },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  role:                { type: Sequelize.TEXT, allowNull: false, defaultValue: '' },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const CliqueMemberRequests = <MyModelStaticGeneric<IMyModel>> sequelize.define('clique_member_requests', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  clique_id:           { type: Sequelize.INTEGER, allowNull: false, references: { model: Cliques, key: 'id' } },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  sender_id:           { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  role:                { type: Sequelize.TEXT, allowNull: false, defaultValue: '' },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);



/** Media */



export const Photos = <MyModelStaticGeneric<IPhotoModel>> sequelize.define('photos', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  model_type:          { type: Sequelize.STRING, allowNull: true }, // determines if post belongs to a particular model; default (null) is user
  model_id:            { type: Sequelize.INTEGER, allowNull: true },
  caption:             { type: Sequelize.STRING(250), allowNull: false },
  tags:                { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  photo_link:          { type: Sequelize.STRING(500), allowNull: false },
  photo_id:            { type: Sequelize.STRING(500), allowNull: false },
  is_explicit:         { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  is_private:          { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const Videos = <MyModelStaticGeneric<IVideoModel>> sequelize.define('videos', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  model_type:          { type: Sequelize.STRING, allowNull: true }, // determines if post belongs to a particular model; default (null) is user
  model_id:            { type: Sequelize.INTEGER, allowNull: true },
  caption:             { type: Sequelize.STRING(250), allowNull: false },
  tags:                { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  video_link:          { type: Sequelize.STRING(500), allowNull: false },
  video_id:            { type: Sequelize.STRING(500), allowNull: false },
  is_explicit:         { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  is_private:          { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const Audios = <MyModelStaticGeneric<IAudioModel>> sequelize.define('audios', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  model_type:          { type: Sequelize.STRING, allowNull: true }, // determines if post belongs to a particular model; default (null) is user
  model_id:            { type: Sequelize.INTEGER, allowNull: true },
  caption:             { type: Sequelize.STRING(250), allowNull: false },
  tags:                { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  audio_link:          { type: Sequelize.STRING(500), allowNull: false },
  audio_id:            { type: Sequelize.STRING(500), allowNull: false },
  is_explicit:         { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  is_private:          { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const Links = <MyModelStaticGeneric<IAudioModel>> sequelize.define('links', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  model_type:          { type: Sequelize.STRING, allowNull: true }, // determines if post belongs to a particular model; default (null) is user
  model_id:            { type: Sequelize.INTEGER, allowNull: true },
  href:                { type: Sequelize.TEXT, allowNull: false },
  title:               { type: Sequelize.STRING(250), allowNull: false },
  description:         { type: Sequelize.STRING(250), allowNull: false },
  tags:                { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  is_private:          { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const Resources = <MyModelStaticGeneric<IResourceModel>> sequelize.define('resources', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  model_type:          { type: Sequelize.STRING, allowNull: true }, // determines if post belongs to a particular model; default (null) is user
  model_id:            { type: Sequelize.INTEGER, allowNull: true },
  resource_type:       { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  tags:                { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  title:               { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  link:                { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  icon_link:           { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  icon_id:             { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  description:         { type: Sequelize.TEXT, allowNull: false, defaultValue: '' },
  visibility:          { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 },
}, common_options);

export const ResourceInterests = <MyModelStaticGeneric<IMyModel>> sequelize.define('resource_interests', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  resource_id:         { type: Sequelize.INTEGER, allowNull: false, references: { model: Resources, key: 'id' } },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 },
}, common_options);



/** Posts */



export const Posts = <MyModelStaticGeneric<IPostModel>> sequelize.define('posts', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  model_type:          { type: Sequelize.STRING, allowNull: true }, // determines if post belongs to a particular model; default (null) is user
  model_id:            { type: Sequelize.INTEGER, allowNull: true },
  title:               { type: Sequelize.STRING(250), allowNull: false, defaultValue: '' },
  body:                { type: Sequelize.TEXT, allowNull: false },
  tags:                { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  is_explicit:         { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  is_private:          { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  visibility:          { type: Sequelize.STRING(75), allowNull: false, defaultValue: '' },
  last_edited:         { type: Sequelize.DATE, allowNull: false, defaultValue: Sequelize.NOW },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const PostViewers = <MyModelStaticGeneric<IPostViewerModel>> sequelize.define('post_viewers', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  post_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const PostPhotos = <MyModelStaticGeneric<IMyModel>> sequelize.define('post_photos', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  post_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  photo_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Photos, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const PostVideos = <MyModelStaticGeneric<IMyModel>> sequelize.define('post_videos', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  post_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  video_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Videos, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const PostAudios = <MyModelStaticGeneric<IMyModel>> sequelize.define('post_audios', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  post_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  audio_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Audios, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const Comments = <MyModelStaticGeneric<IPostCommentModel>> sequelize.define('post_comments', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  post_id:             { type: Sequelize.INTEGER, allowNull: true, references: { model: Posts, key: 'id' } },
  body:                { type: Sequelize.TEXT, allowNull: false },
  last_edited:         { type: Sequelize.DATE, allowNull: false, defaultValue: Sequelize.NOW },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const CommentPhotos = <MyModelStaticGeneric<IMyModel>> sequelize.define('comment_photos', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  comment_id:          { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  photo_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Photos, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const CommentVideos = <MyModelStaticGeneric<IMyModel>> sequelize.define('comment_videos', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  comment_id:          { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  video_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Videos, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const CommentAudios = <MyModelStaticGeneric<IMyModel>> sequelize.define('comment_audios', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  comment_id:          { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  audio_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Audios, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const Replies = <MyModelStaticGeneric<IPostCommentReplyModel>> sequelize.define('post_comment_replies', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  comment_id:          { type: Sequelize.INTEGER, allowNull: false, references: { model: Comments, key: 'id' } },
  body:                { type: Sequelize.TEXT, allowNull: false },
  last_edited:         { type: Sequelize.DATE, allowNull: false, defaultValue: Sequelize.NOW },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const ReplyPhotos = <MyModelStaticGeneric<IMyModel>> sequelize.define('reply_photos', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  reply_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  photo_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Photos, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const ReplyVideos = <MyModelStaticGeneric<IMyModel>> sequelize.define('reply_videos', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  reply_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  video_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Videos, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const ReplyAudios = <MyModelStaticGeneric<IMyModel>> sequelize.define('reply_audios', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  reply_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  audio_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Audios, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);



/** Reactions */



export const UserReactions = <MyModelStaticGeneric<IMyModel>> sequelize.define('user_reactions', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  reaction_id:         { type: Sequelize.INTEGER, allowNull: true },
  reaction:            { type: Sequelize.STRING, allowNull: false },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const ResourceReactions = <MyModelStaticGeneric<IMyModel>> sequelize.define('resource_reactions', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  resource_id:         { type: Sequelize.INTEGER, allowNull: false, references: { model: Resources, key: 'id' } },
  reaction_id:         { type: Sequelize.INTEGER, allowNull: true },
  reaction:            { type: Sequelize.STRING, allowNull: false },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const CliqueReactions = <MyModelStaticGeneric<IMyModel>> sequelize.define('clique_reactions', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  clique_id:           { type: Sequelize.INTEGER, allowNull: false, references: { model: Cliques, key: 'id' } },
  reaction_id:         { type: Sequelize.INTEGER, allowNull: true },
  reaction:            { type: Sequelize.STRING, allowNull: false },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const PostReactions = <MyModelStaticGeneric<IPostReactionModel>> sequelize.define('post_reactions', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  post_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  reaction_id:         { type: Sequelize.INTEGER, allowNull: true },
  reaction:            { type: Sequelize.STRING, allowNull: false },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const CommentReactions = <MyModelStaticGeneric<IPostCommentReactionModel>> sequelize.define('post_comment_reactions', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  comment_id:          { type: Sequelize.INTEGER, allowNull: false, references: { model: Comments, key: 'id' } },
  reaction_id:         { type: Sequelize.INTEGER, allowNull: true },
  reaction:            { type: Sequelize.STRING, allowNull: false },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const ReplyReactions = <MyModelStaticGeneric<IPostCommentReplyReactionModel>> sequelize.define('post_comment_reply_reactions', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  owner_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  reply_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Replies, key: 'id' } },
  reaction_id:         { type: Sequelize.INTEGER, allowNull: true },
  reaction:            { type: Sequelize.STRING, allowNull: false },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);



/** Save */



export const SavedPhotos = <MyModelStaticGeneric<IMyModel>> sequelize.define('saved_photos', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  photo_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Photos, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const SavedVideos = <MyModelStaticGeneric<IMyModel>> sequelize.define('saved_videos', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  video_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Videos, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const SavedAudios = <MyModelStaticGeneric<IMyModel>> sequelize.define('saved_audios', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  audio_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Audios, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const SavedLinks = <MyModelStaticGeneric<IMyModel>> sequelize.define('saved_links', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  link_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Links, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const SavedPosts = <MyModelStaticGeneric<IMyModel>> sequelize.define('saved_posts', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  post_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);



/** Share */



export const SharedPhotos = <MyModelStaticGeneric<IMyModel>> sequelize.define('shared_photos', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  model_type:          { type: Sequelize.STRING, allowNull: true }, // determines if post belongs to a particular model; default (null) is user
  model_id:            { type: Sequelize.INTEGER, allowNull: true },
  photo_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Photos, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const SharedVideos = <MyModelStaticGeneric<IMyModel>> sequelize.define('shared_videos', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  model_type:          { type: Sequelize.STRING, allowNull: true }, // determines if post belongs to a particular model; default (null) is user
  model_id:            { type: Sequelize.INTEGER, allowNull: true },
  video_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Videos, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const SharedAudios = <MyModelStaticGeneric<IMyModel>> sequelize.define('shared_audios', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  model_type:          { type: Sequelize.STRING, allowNull: true }, // determines if post belongs to a particular model; default (null) is user
  model_id:            { type: Sequelize.INTEGER, allowNull: true },
  audio_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Audios, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const SharedLinks = <MyModelStaticGeneric<IMyModel>> sequelize.define('shared_links', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  model_type:          { type: Sequelize.STRING, allowNull: true }, // determines if post belongs to a particular model; default (null) is user
  model_id:            { type: Sequelize.INTEGER, allowNull: true },
  link_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Links, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const SharedPosts = <MyModelStaticGeneric<IMyModel>> sequelize.define('shared_posts', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  model_type:          { type: Sequelize.STRING, allowNull: true }, // determines if post belongs to a particular model; default (null) is user
  model_id:            { type: Sequelize.INTEGER, allowNull: true },
  post_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Posts, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);



export const Conversations = <MyModelStaticGeneric<IMyModel>> sequelize.define('conversations', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  creator_id:          { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  title:               { type: Sequelize.TEXT, allowNull: false, defaultValue: '' },
  icon_link:           { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  icon_id:             { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const ConversationLastOpeneds = <MyModelStaticGeneric<IMyModel>> sequelize.define('conversation_last_openeds', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  conversation_id:     { type: Sequelize.INTEGER, allowNull: false, references: { model: Conversations, key: 'id' } },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  last_opened:         { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const ConversationMembers = <MyModelStaticGeneric<IMyModel>> sequelize.define('conversation_members', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  conversation_id:     { type: Sequelize.INTEGER, allowNull: false, references: { model: Conversations, key: 'id' } },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  role:                { type: Sequelize.TEXT, allowNull: false, defaultValue: '' },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const ConversationMemberRequests = <MyModelStaticGeneric<IMyModel>> sequelize.define('conversation_member_requests', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  conversation_id:     { type: Sequelize.INTEGER, allowNull: false, references: { model: Conversations, key: 'id' } },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  sender_id:           { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  role:                { type: Sequelize.TEXT, allowNull: false, defaultValue: '' },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const ConversationMessages = <MyModelStaticGeneric<IMyModel>> sequelize.define('conversation_messages', {
  id:                 { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  conversation_id:    { type: Sequelize.INTEGER, allowNull: false, references: { model: Conversations, key: 'id' } },
  parent_message_id:  { type: Sequelize.INTEGER, allowNull: true },
  user_id:            { type: Sequelize.INTEGER, allowNull: true, references: { model: Users, key: 'id' } },
  body:               { type: Sequelize.TEXT, allowNull: false, defaultValue: '' },
  date_created:       { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:               { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const ConversationMessageSeens = <MyModelStaticGeneric<IMyModel>> sequelize.define('conversation_message_seens', {
  id:                 { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  conversation_id:    { type: Sequelize.INTEGER, allowNull: false, references: { model: Conversations, key: 'id' } },
  message_id:         { type: Sequelize.INTEGER, allowNull: false, references: { model: ConversationMessages, key: 'id' } },
  user_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  seen:               { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: true },
  date_created:       { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:               { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const Messagings = <MyModelStaticGeneric<IMyModel>> sequelize.define('messagings', {
  id:                 { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  sender_id:          { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  date_created:       { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:               { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const MessagingRequests = <MyModelStaticGeneric<IMyModel>> sequelize.define('messaging_requests', {
  id:                 { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  sender_id:          { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  date_created:       { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:               { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const Messages = <MyModelStaticGeneric<IMyModel>> sequelize.define('messages', {
  id:                 { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  from_id:            { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  to_id:              { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  body:               { type: Sequelize.TEXT, allowNull: true, defaultValue: '' },
  opened:             { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  date_created:       { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:               { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const MessagePictures = <MyModelStaticGeneric<IMyModel>> sequelize.define('message_pictures', {
  id:                { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  message_id:        { type: Sequelize.INTEGER, allowNull: false, references: { model: Messages, key: 'id' } },
  image_link:        { type: Sequelize.TEXT, allowNull: false, defaultValue: '' },
  image_id:          { type: Sequelize.TEXT, allowNull: false, defaultValue: '' },
  date_created:      { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:              { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const AccountsReported = <MyModelStaticGeneric<IMyModel>> sequelize.define('account_reported', {
  id:                    { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:               { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  reporting_id:          { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  issue_type:            { type: Sequelize.STRING, allowNull: false },
  details:               { type: Sequelize.TEXT, allowNull: false },
  date_created:          { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                  { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const Blockings = <MyModelStaticGeneric<IMyModel>> sequelize.define('blockings', {
  id:                    { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  blocks_id:           { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, unique: true, defaultValue: Sequelize.UUIDV1 }
}, common_options);

export const SiteFeedbacks = <MyModelStaticGeneric<IMyModel>> sequelize.define('site_feedbacks', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  user_id:             { type: Sequelize.INTEGER, allowNull: false, references: { model: Users, key: 'id' } },
  rating:              { type: Sequelize.INTEGER, allowNull: false, defaultValue: 5 },
  title:               { type: Sequelize.TEXT, allowNull: true, defaultValue: '' },
  summary:             { type: Sequelize.TEXT, allowNull: true, defaultValue: '' },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 },
}, common_options);

export const NewsDataCache = <MyModelStaticGeneric<IMyModel>> sequelize.define('news_data_cache', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  json_data:           { type: Sequelize.TEXT, allowNull: true, defaultValue: '' },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  uuid:                { type: Sequelize.STRING, defaultValue: Sequelize.UUIDV1 },
}, common_options);

export const ApiKeys = <MyModelStaticGeneric<IMyModel>> sequelize.define('api_keys', {
  id:                  { type: Sequelize.INTEGER, primaryKey: true, autoIncrement: true },
  key:                 { type: Sequelize.UUID, unique: true, defaultValue: Sequelize.UUIDV1 },
  firstname:           { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  middlename:          { type: Sequelize.STRING, allowNull: true, defaultValue: '' },
  lastname:            { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  email:               { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  phone:               { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  website:             { type: Sequelize.STRING, allowNull: false, defaultValue: '' },
  verified:            { type: Sequelize.BOOLEAN, allowNull: false, defaultValue: false },
  date_created:        { type: Sequelize.DATE, defaultValue: Sequelize.NOW },
  requests_count:      { type: Sequelize.INTEGER, defaultValue: 0 },
}, common_options);

/** Relationships */

Users.hasMany(Notifications, { as: 'to_notifications', foreignKey: 'to_id', sourceKey: 'id' });
Notifications.belongsTo(Users, { as: 'to', foreignKey: 'to_id', targetKey: 'id' });
Users.hasMany(Notifications, { as: 'from_notifications', foreignKey: 'from_id', sourceKey: 'id' });
Notifications.belongsTo(Users, { as: 'from', foreignKey: 'from_id', targetKey: 'id' });

Users.hasMany(Follows, { as: 'followers', foreignKey: 'follows_id', sourceKey: 'id' });
Follows.belongsTo(Users, { as: 'following', foreignKey: 'follows_id', targetKey: 'id' });
Users.hasMany(Follows, { as: 'followings', foreignKey: 'user_id', sourceKey: 'id' });
Follows.belongsTo(Users, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });

Users.hasMany(Messagings, { as: 'message_sendings', foreignKey: 'sender_id', sourceKey: 'id' });
Messagings.belongsTo(Users, { as: 'sender', foreignKey: 'sender_id', targetKey: 'id' });
Users.hasMany(Messagings, { as: 'message_receivings', foreignKey: 'user_id', sourceKey: 'id' });
Messagings.belongsTo(Users, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });

Users.hasMany(Messages, { as: 'messages_sent', foreignKey: 'from_id', sourceKey: 'id' });
Messages.belongsTo(Users, { as: 'from', foreignKey: 'from_id', targetKey: 'id' });
Users.hasMany(Messages, { as: 'messages_received', foreignKey: 'to_id', sourceKey: 'id' });
Messages.belongsTo(Users, { as: 'to', foreignKey: 'to_id', targetKey: 'id' });

Users.hasMany(Cliques, { as: 'cliques_owned', foreignKey: 'creator_id', sourceKey: 'id' });
Cliques.belongsTo(Users, { as: 'creator', foreignKey: 'creator_id', targetKey: 'id' });
Users.hasMany(CliqueInterests, { as: 'clique_interests', foreignKey: 'user_id', sourceKey: 'id' });
CliqueInterests.belongsTo(Users, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });
Cliques.hasMany(CliqueInterests, { as: 'interests', foreignKey: 'clique_id', sourceKey: 'id' });
CliqueInterests.belongsTo(Cliques, { as: 'clique', foreignKey: 'clique_id', targetKey: 'id' });

Users.hasMany(CliqueMembers, { as: 'cliques', foreignKey: 'user_id', sourceKey: 'id' });
CliqueMembers.belongsTo(Users, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });
Cliques.hasMany(CliqueMembers, { as: 'members', foreignKey: 'clique_id', sourceKey: 'id' });
CliqueMembers.belongsTo(Cliques, { as: 'clique', foreignKey: 'clique_id', targetKey: 'id' });

Users.hasMany(CliqueMemberRequests, { as: 'clique_member_requests', foreignKey: 'user_id', sourceKey: 'id' });
CliqueMemberRequests.belongsTo(Users, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });
Cliques.hasMany(CliqueMemberRequests, { as: 'member_requests', foreignKey: 'clique_id', sourceKey: 'id' });
CliqueMemberRequests.belongsTo(Cliques, { as: 'clique', foreignKey: 'clique_id', targetKey: 'id' });

Users.hasMany(Resources, { as: 'resources', foreignKey: 'owner_id', sourceKey: 'id' });
Resources.belongsTo(Users, { as: 'owner', foreignKey: 'owner_id', targetKey: 'id' });
Resources.hasMany(ResourceInterests, { as: 'interests', foreignKey: 'resource_id', sourceKey: 'id' });
ResourceInterests.belongsTo(Resources, { as: 'resource', foreignKey: 'resource_id', targetKey: 'id' });
Users.hasMany(ResourceInterests, { as: 'resource_interests', foreignKey: 'user_id', sourceKey: 'id' });
ResourceInterests.belongsTo(Users, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });

Users.hasMany(Conversations, { as: 'owned_conversatins', foreignKey: 'creator_id', sourceKey: 'id' });
Conversations.belongsTo(Users, { as: 'creator', foreignKey: 'creator_id', targetKey: 'id' });

Users.hasMany(ConversationLastOpeneds, { as: 'conversations_opened', foreignKey: 'user_id', sourceKey: 'id' });
ConversationLastOpeneds.belongsTo(Users, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });
Conversations.hasMany(ConversationLastOpeneds, { as: 'conversations_opened', foreignKey: 'conversation_id', sourceKey: 'id' });
ConversationLastOpeneds.belongsTo(Conversations, { as: 'conversation', foreignKey: 'conversation_id', targetKey: 'id' });

Users.hasMany(ConversationMembers, { as: 'conversations', foreignKey: 'user_id', sourceKey: 'id' });
ConversationMembers.belongsTo(Users, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });
Conversations.hasMany(ConversationMembers, { as: 'members', foreignKey: 'conversation_id', sourceKey: 'id' });
ConversationMembers.belongsTo(Conversations, { as: 'conversation', foreignKey: 'conversation_id', targetKey: 'id' });

Users.hasMany(ConversationMessages, { as: 'conversation_messages', foreignKey: 'user_id', sourceKey: 'id' });
ConversationMessages.belongsTo(Users, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });
Conversations.hasMany(ConversationMessages, { as: 'messages', foreignKey: 'conversation_id', sourceKey: 'id' });
ConversationMessages.belongsTo(Conversations, { as: 'conversation', foreignKey: 'conversation_id', targetKey: 'id' });

Users.hasMany(ConversationMessageSeens, { as: 'messages_seen', foreignKey: 'user_id', sourceKey: 'id' });
ConversationMessageSeens.belongsTo(Users, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });
ConversationMessages.hasMany(ConversationMessageSeens, { as: 'viewers', foreignKey: 'message_id', sourceKey: 'id' });
ConversationMessageSeens.belongsTo(ConversationMessages, { as: 'message', foreignKey: 'message_id', targetKey: 'id' });



Users.hasMany(Posts, { as: 'posts', foreignKey: 'owner_id', sourceKey: 'id' });
Posts.belongsTo(Users, { as: 'owner', foreignKey: 'owner_id', targetKey: 'id' });
SavedPosts.belongsTo(Users, { as: 'user', foreignKey: 'user_id', targetKey: 'id' });
Users.hasMany(Comments, { as: 'comments', foreignKey: 'owner_id', sourceKey: 'id' });
Comments.belongsTo(Users, { as: 'owner', foreignKey: 'owner_id', targetKey: 'id' });
Users.hasMany(Replies, { as: 'replies', foreignKey: 'owner_id', sourceKey: 'id' });
Replies.belongsTo(Users, { as: 'owner', foreignKey: 'owner_id', targetKey: 'id' });

Users.hasMany(PostReactions, { as: 'post_reactions', foreignKey: 'owner_id', sourceKey: 'id' });
PostReactions.belongsTo(Users, { as: 'owner', foreignKey: 'owner_id', targetKey: 'id' });
Users.hasMany(CommentReactions, { as: 'comment_reactions', foreignKey: 'owner_id', sourceKey: 'id' });
CommentReactions.belongsTo(Users, { as: 'owner', foreignKey: 'owner_id', targetKey: 'id' });
Users.hasMany(ReplyReactions, { as: 'reply_reactions', foreignKey: 'owner_id', sourceKey: 'id' });
ReplyReactions.belongsTo(Users, { as: 'owner', foreignKey: 'owner_id', targetKey: 'id' });

Posts.hasMany(PostViewers, { as: 'viewers', foreignKey: 'post_id', sourceKey: 'id' });
PostViewers.belongsTo(Posts, { as: 'post', foreignKey: 'post_id', targetKey: 'id' });
Users.hasMany(PostViewers, { as: 'viewings', foreignKey: 'user_id', sourceKey: 'id' });
PostViewers.belongsTo(Users, { as: 'viewer', foreignKey: 'user_id', targetKey: 'id' });

Posts.hasMany(PostPhotos, { as: 'photos', foreignKey: 'post_id', sourceKey: 'id' });
PostPhotos.belongsTo(Posts, { as: 'post', foreignKey: 'post_id', targetKey: 'id' });
Photos.hasMany(PostPhotos, { as: 'post_photos', foreignKey: 'photo_id', sourceKey: 'id' });
PostPhotos.belongsTo(Photos, { as: 'photo', foreignKey: 'photo_id', targetKey: 'id' });

Posts.hasMany(PostVideos, { as: 'post_videos', foreignKey: 'post_id', sourceKey: 'id' });
PostVideos.belongsTo(Posts, { as: 'post', foreignKey: 'post_id', targetKey: 'id' });
Videos.hasMany(PostVideos, { as: 'post_videos', foreignKey: 'video_id', sourceKey: 'id' });
PostVideos.belongsTo(Videos, { as: 'video_post', foreignKey: 'video_id', targetKey: 'id' });

Posts.hasMany(PostAudios, { as: 'post_audios', foreignKey: 'post_id', sourceKey: 'id' });
PostAudios.belongsTo(Posts, { as: 'post', foreignKey: 'post_id', targetKey: 'id' });
Photos.hasMany(PostAudios, { as: 'post_audios', foreignKey: 'audio_id', sourceKey: 'id' });
PostAudios.belongsTo(Photos, { as: 'audio_post', foreignKey: 'audio_id', targetKey: 'id' });

Posts.hasMany(Comments, { as: 'comments', foreignKey: 'post_id', sourceKey: 'id' });
Comments.belongsTo(Posts, { as: 'post', foreignKey: 'post_id', targetKey: 'id' });
Posts.hasMany(PostReactions, { as: 'reactions', foreignKey: 'post_id', sourceKey: 'id' });
PostReactions.belongsTo(Posts, { as: 'comment_post', foreignKey: 'post_id', targetKey: 'id' });

Comments.hasMany(CommentPhotos, { as: 'comment_photos', foreignKey: 'comment_id', sourceKey: 'id' });
CommentPhotos.belongsTo(Comments, { as: 'comment', foreignKey: 'comment_id', targetKey: 'id' });
Photos.hasMany(CommentPhotos, { as: 'comment_photos', foreignKey: 'photo_id', sourceKey: 'id' });
CommentPhotos.belongsTo(Photos, { as: 'photo_comment', foreignKey: 'photo_id', targetKey: 'id' });

Comments.hasMany(CommentVideos, { as: 'comment_videos', foreignKey: 'comment_id', sourceKey: 'id' });
CommentVideos.belongsTo(Comments, { as: 'comment', foreignKey: 'comment_id', targetKey: 'id' });
Videos.hasMany(CommentVideos, { as: 'comment_videos', foreignKey: 'video_id', sourceKey: 'id' });
CommentVideos.belongsTo(Videos, { as: 'video_comment', foreignKey: 'video_id', targetKey: 'id' });

Comments.hasMany(CommentAudios, { as: 'comment_audios', foreignKey: 'comment_id', sourceKey: 'id' });
CommentAudios.belongsTo(Comments, { as: 'comment', foreignKey: 'comment_id', targetKey: 'id' });
Audios.hasMany(CommentAudios, { as: 'comment_audios', foreignKey: 'audio_id', sourceKey: 'id' });
CommentAudios.belongsTo(Audios, { as: 'audio_comment', foreignKey: 'audio_id', targetKey: 'id' });

Replies.hasMany(ReplyPhotos, { as: 'reply_photos', foreignKey: 'reply_id', sourceKey: 'id' });
ReplyPhotos.belongsTo(Replies, { as: 'reply', foreignKey: 'reply_id', targetKey: 'id' });
Photos.hasMany(ReplyPhotos, { as: 'reply_photos', foreignKey: 'photo_id', sourceKey: 'id' });
ReplyPhotos.belongsTo(Photos, { as: 'photo_reply', foreignKey: 'photo_id', targetKey: 'id' });

Replies.hasMany(ReplyVideos, { as: 'reply_videos', foreignKey: 'reply_id', sourceKey: 'id' });
ReplyVideos.belongsTo(Replies, { as: 'reply', foreignKey: 'reply_id', targetKey: 'id' });
Videos.hasMany(ReplyVideos, { as: 'reply_videos', foreignKey: 'video_id', sourceKey: 'id' });
ReplyVideos.belongsTo(Videos, { as: 'video_reply', foreignKey: 'video_id', targetKey: 'id' });

Replies.hasMany(ReplyAudios, { as: 'reply_audios', foreignKey: 'reply_id', sourceKey: 'id' });
ReplyAudios.belongsTo(Replies, { as: 'reply', foreignKey: 'reply_id', targetKey: 'id' });
Audios.hasMany(ReplyAudios, { as: 'reply_audios', foreignKey: 'audio_id', sourceKey: 'id' });
ReplyAudios.belongsTo(Audios, { as: 'audio_reply', foreignKey: 'audio_id', targetKey: 'id' });

Comments.hasMany(Replies, { as: 'replies', foreignKey: 'comment_id', sourceKey: 'id' });
Replies.belongsTo(Comments, { as: 'comment', foreignKey: 'comment_id', targetKey: 'id' });
Comments.hasMany(CommentReactions, { as: 'reactions', foreignKey: 'comment_id', sourceKey: 'id' });
CommentReactions.belongsTo(Comments, { as: 'comment', foreignKey: 'comment_id', targetKey: 'id' });

Replies.hasMany(ReplyReactions, { as: 'reactions', foreignKey: 'reply_id', sourceKey: 'id' });
ReplyReactions.belongsTo(Replies, { as: 'reply', foreignKey: 'reply_id', targetKey: 'id' });

/** Init Database */

sequelizeInst.sync({ force: false })
  .then(() => { console.log('Database Initialized! ENV: ' + db_env); })
  .catch((error) => { console.log('Database Failed!', error); });